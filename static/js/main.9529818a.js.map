{"version":3,"file":"static/js/main.9529818a.js","mappings":"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","sources":["index.jsx"],"sourcesContent":["import './styles.css'\r\n\r\nconst canvas = document.getElementById('preview');\r\nconst fileInput = document.querySelector('input[type=\"file\"');\r\nconst asciiImage = document.getElementById('ascii');\r\nconst textfieldEncryption = document.querySelector('.encrypt-text');\r\nconst textfieldDecryption = document.querySelector('.decrypt-text');\r\n\r\nconst context = canvas.getContext('2d');\r\nconst buttonEncrypt = document.querySelector('.encrypt');\r\nconst buttonDecrypt = document.querySelector('.decrypt');\r\nconst buttonCopy = document.querySelector('.copy')\r\n\r\nbuttonEncrypt.addEventListener('click', function() {\r\n  encrypt()\r\n});\r\n\r\nbuttonDecrypt.addEventListener('click', function() {\r\n    decrypt()\r\n  });\r\n\r\n  buttonCopy.addEventListener('click', function() {\r\n    copy()\r\n  });\r\n\r\n\r\n    let grayRamp = ``;\r\n    let symbols = `! ? & $ @ B . % 8 & W M # * o a h k b d p q w m Z O 0 Q L C J U Y X z c v u n x r j f t / | ( ) 1 { } [ ] ? - _ + ~ < > i ! l I ; : , \" ^ `;\r\n    let rampLength = grayRamp.length;    \r\n\r\n    function encrypt(){\r\n        let mytext = textfieldEncryption.value\r\n        let array = grayRamp.split(\" \")\r\n\r\n        for (let letter = 0 ; letter < mytext.length ; letter += 1) {\r\n            array.push(mytext[letter])\r\n            \r\n        }\r\n        array.toString()\r\n        \r\n        grayRamp = symbols + array.toString();\r\n        \r\n        \r\n        rampLength = grayRamp.length;\r\n        \r\n        drawAscii(mygray, mywidth, mytext);\r\n    }\r\n\r\n    \r\n    \r\n        const toGrayScale = (r, g, b) => 0.21 * r + 0.72 * g + 0.07 * b;\r\n\r\n        const getFontRatio = () => {\r\n            \r\n            const pre = document.createElement('pre');\r\n            pre.style.display = 'inline';\r\n            pre.textContent = ' ';\r\n\r\n            document.body.appendChild(pre);\r\n            const { width, height } = pre.getBoundingClientRect();\r\n            document.body.removeChild(pre);\r\n\r\n            return height / width;\r\n        };\r\n\r\n        const fontRatio = getFontRatio();\r\n        \r\n\r\n        const convertToGrayScales = (context, width, height) => {\r\n            const imageData = context.getImageData(0, 0, width, height);\r\n\r\n            const grayScales = [];\r\n\r\n            for (let i = 0 ; i < imageData.data.length ; i += 4) {\r\n                const r = imageData.data[i];\r\n                const g = imageData.data[i + 1];\r\n                const b = imageData.data[i + 2];\r\n\r\n                const grayScale = toGrayScale(r, g, b);\r\n                imageData.data[i] = imageData.data[i + 1] = imageData.data[i + 2] = grayScale;\r\n\r\n                grayScales.push(grayScale);\r\n            }\r\n\r\n            context.putImageData(imageData, 0, 0);\r\n\r\n            return grayScales;\r\n        };\r\n\r\n        const MAXIMUM_WIDTH = 50;\r\n        const MAXIMUM_HEIGHT = 50;\r\n\r\n        const clampDimensions = (width, height) => {\r\n            const rectifiedWidth = Math.floor(getFontRatio() * width);\r\n\r\n            if (height > MAXIMUM_HEIGHT) {\r\n                const reducedWidth = Math.floor(rectifiedWidth * MAXIMUM_HEIGHT / height);\r\n                return [reducedWidth, MAXIMUM_HEIGHT];\r\n            }\r\n\r\n            if (width > MAXIMUM_WIDTH) {\r\n                const reducedHeight = Math.floor(height * MAXIMUM_WIDTH / rectifiedWidth);\r\n                return [MAXIMUM_WIDTH, reducedHeight];\r\n            }\r\n\r\n            return [rectifiedWidth, height];\r\n        };\r\n\r\n        let mygray\r\n        let mywidth\r\n        \r\n\r\n        fileInput.onchange = (e) => {\r\n            const file = e.target.files[0];\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = (event) => {\r\n                const image = new Image();\r\n                image.onload = () => {\r\n                    const [width, height] = clampDimensions(image.width, image.height);\r\n\r\n                    canvas.width = width;\r\n                    canvas.height = height;\r\n\r\n                    context.drawImage(image, 0, 0, width, height);\r\n                    const grayScales = convertToGrayScales(context, width, height);\r\n\r\n                    fileInput.style.display = 'none';\r\n                    \r\n                    mygray = grayScales\r\n                    mywidth = width \r\n                }\r\n\r\n                image.src = event.target.result;\r\n            };\r\n\r\n            reader.readAsDataURL(file);\r\n        };\r\n\r\n\r\n\r\n        const getCharacterForGrayScale = grayScale => grayRamp[Math.ceil((rampLength - 1) * grayScale / 255)];\r\n\r\n        \r\n\r\n        function drawAscii (mygray, mywidth, mytext, index){\r\n            \r\n            \r\n            let ascii = mygray.reduce((asciiImage, grayScale, index) => {\r\n                let nextChars = getCharacterForGrayScale(grayScale);\r\n                if ((index + 1) % mywidth === 0) {\r\n                    nextChars += '\\n'\r\n                }\r\n                \r\n                \r\n                return asciiImage + nextChars;\r\n            }, '');\r\n\r\n        \r\n            let newAscii = ``\r\n    \r\n            let zahl = mytext.length \r\n            let nummer = 0\r\n\r\n            for(let b = 0; b < (ascii.length); b += 1){\r\n                if (b > 3000){\r\n                    \r\n                        if(b % 9 === 0){\r\n                            if(zahl > 0){\r\n                                zahl -= 1\r\n                                newAscii += mytext.slice(nummer, nummer+1)\r\n                                nummer += 1\r\n                            }\r\n                            else{\r\n                                newAscii += ascii[b]\r\n                            }\r\n                        }\r\n                        else{\r\n                            newAscii += ascii[b]\r\n                        } \r\n                     \r\n                }\r\n                else{\r\n                    newAscii += ascii[b]\r\n                } \r\n                    \r\n            }\r\n                    newAscii.slice(-mytext.length)\r\n                    asciiImage.textContent = newAscii;\r\n                    textfieldDecryption.value = newAscii;\r\n                 \r\n        }\r\n\r\n        \r\n        function decrypt(){\r\n            let decryptText = textfieldDecryption.value\r\n            let decryptedText =``\r\n            for(let b = 0; b < (decryptText.length); b += 1){\r\n                \r\n                if(b > 3000){\r\n                    if(b % 9 === 0){\r\n                    \r\n                        decryptedText += decryptText[b]\r\n                        \r\n                    }\r\n                \r\n                }\r\n                \r\n            }\r\n            textfieldEncryption.value = decryptedText;\r\n        }\r\n\r\n        function copy(){\r\n            textfieldDecryption.select();\r\n            textfieldDecryption.setSelectionRange(0, 99999); // For mobile devices\r\n\r\n            // Copy the text inside the text field\r\n            navigator.clipboard.writeText(textfieldDecryption.value);\r\n\r\n            // Alert the copied text\r\n            alert(\"Copied the text: \" + textfieldDecryption.value);\r\n        }\r\n\r\n\r\n"],"names":["canvas","document","getElementById","fileInput","querySelector","asciiImage","textfieldEncryption","textfieldDecryption","context","getContext","buttonEncrypt","buttonDecrypt","buttonCopy","addEventListener","mytext","value","array","grayRamp","split","letter","length","push","toString","symbols","rampLength","mygray","mywidth","index","ascii","reduce","grayScale","nextChars","getCharacterForGrayScale","newAscii","zahl","nummer","b","slice","textContent","drawAscii","encrypt","decryptText","decryptedText","decrypt","select","setSelectionRange","navigator","clipboard","writeText","alert","toGrayScale","r","g","getFontRatio","pre","createElement","style","display","body","appendChild","width","height","getBoundingClientRect","removeChild","onchange","e","file","target","files","reader","FileReader","onload","event","image","Image","clampDimensions","rectifiedWidth","Math","floor","drawImage","grayScales","convertToGrayScales","imageData","getImageData","i","data","putImageData","src","result","readAsDataURL","ceil"],"sourceRoot":""}